# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PsSWaPR4wWkwhztF7ffihLxfSbZE1GKu
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

import matplotlib as mpl
get_ipython().run_line_magic('matplotlib', 'inline')
mpl.rcParams['figure.dpi'] = 300

#IMPORTING_DATASET
dataset = pd.read_csv("ESCC vs NORMAL.csv")
dataset.head()

dataset["SAMPLES"].value_counts()

X = dataset.iloc[:,1:]
X.head()

Y=dataset.iloc[:,:1]
Y.head()

from sklearn.decomposition import PCA
sklearn_pca = PCA(n_components=2)
print(X.shape)
PCs = sklearn_pca.fit_transform(X)
print(PCs.shape)

dataset_transform = pd.DataFrame(PCs,columns=['PC1','PC2'])
dataset_transform = pd.concat([dataset_transform,Y],axis=1)
fig, axes = plt.subplots(figsize=(4,4))
sns.set_style("whitegrid")
sns.scatterplot(x='PC1',y='PC2',data = dataset_transform,hue='HGNC',s=60)

#TRAIN_AND_TEST_SPLIT
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.20, random_state = 0)

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

y_pred

from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)

#CONFUSION_MATRIX
sns.heatmap(cm,annot=True,fmt='d',cmap="gray")

import xgboost as xgb

#CLASSIFIER
xgb_mod=xgb.XGBClassifier(random_state=42)
xgb_mod=xgb_mod.fit(X_train,y_train.values.ravel())

y_pred = xgb_mod.predict(X_test)

# Performance
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy: %.2f%%" % (accuracy * 100.0))

import shap
explainer = shap.TreeExplainer(xgb_mod)
shap_values = explainer.shap_values(X)
expected_value = explainer.expected_value

############## visualizations #############
# Generate summary dot plot
shap.summary_plot(shap_values, X,title="SHAP summary plot")

shap_values.shape

#BAR_PLOT
shap.summary_plot(shap_values, X,plot_type="bar",max_display=14)